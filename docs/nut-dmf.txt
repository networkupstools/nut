= DMF - Device Mapping File

== Abstract

The aim of DMF is to develop a solution allowing to modify or even add new
NUT features and ultimately device and/or protocol support without having
to recompile the binary driver (such as `snmp-ups`) or the whole NUT source.
Support for DMF requires linking with the `libneon` XML parser, which is
already used in the `netxml-ups` NUT driver (so no new required dependencies
are added). Currently the DMF technology was implemented only for SNMP MIB
mappings, but it is expected to be used in other subsystems where the same
typical framework of the driver logic is used with different variables to
produce several (static) power device drivers for NUT.

The present solution is a first iteration to read this information from an
external file (XML formatted). The `*-mib.c` files present in the vanilla
NUT sources at this time have been processed to produce `*-mib.dmf` data files
ready for dynamic loading at end-user installations. Conversion tools are
also distributed in this iteration, see their chapter below. They do bring
some Python dependency requirements, but are not strict requirements for
NUT (neither as common-case nor `distcheck` builds) -- the tools are only
intended for manual usage by a few developers. However, they have been
integrated with the `configure` script, so one can enable re-generation
and/or validation of the `*-mib.dmf` files from C source components of
the `snmp-ups` driver.

The source files and recipes related to DMF support are dispersed across the
NUT codebase, while helpful resources (including the generation of DMF files
from C source structures, which may be needed for third-party projects or
for some time as the legacy and DMF approaches co-exist in the NUT codebase)
are distributed in `$NUTSRC/scripts/DMF/` subdirectory.

As something between end-user conversion tools and a sample program, the
`nut-scanner-reindex-dmfsnmp` code is provided to read the library of
complete DMFs (and validate their contents for parsability, along the way)
from a directory, and produce a DMF file that only contains the truncated
`mib2nut` entries as needed for the `nut-scanner`.
As an end-user tool, this program can help during updates of the DMF set.
A private build of this code as `dmf-reindex` can be made in the Makefile
recipe for generation of the `dmfnutscan` contents; but this is currently
disabled in the `configure.ac` script in favor of using a single common
build (with the private one reserved for hacking to try different logic).

NOTE: In the current iteration the `nut-scanner-reindex-dmfsnmp` program
is not very much configurable, so it just scans all `*.dmf` files in the
current directory (or one specified with `-Z dirpath`) and prints the
resulting XML DMF markup to `stdout` -- so you can redirect it to another
file. To avoid later duplicate entries, if you must store this file with
the original SNMP MIB mapping DMFs, consider saving the nut-scanner DMF
file with a different extension (may be upper-cased `*.DMF` for example)
or if you can -- save it into a different directory.

NOTE: In particular, keep in mind that some mappings are sensitive to load
order, for example the IETF standard MIBs should be supported by all SNMP
capable devices, so we want to load the `ietf-mib.dmf` after trying all
other options. Similar situations may theoretically be the case with some
vendor's common MIB as opposed to a device-specific MIB with more details
(but such cases have not surfaced in common NUT codebase). Currently the
loading of specifically `ietf-mib.dmf` after other options is hardcoded
in the Makefile recipes which produce the directory with alphabetically
sorted names of symlinks to DMF files intended for end-user consumption
after installation.

NOTE: If you provide your own DMF files that are not generated from existing
`*-mib.c` sources, use some `*.dmf` filename pattern that does not end in a
`-mib.dmf` sequence specifically!

Overview of DMF usage from C code is maintained in the `dmf.h` file, driver
and application developers should look there for the "The big theory" details.
It is expected that DMF will outgrow the initial SNMP use-case, so there is
a formal separation of `dmf.h` and `dmfsnmp.h` already in place.

A second iteration is experimentally provided, which is to support not only
static mappings of the first iteration (so as to be functionally and logically
equivalent to the pre-DMF code), but also add support for dynamic mappings
using an interpreted language. It may be incomplete and is subject to change
after some team discussions. LUA is the first implementation in the works,
so it would be the default option. Given experimental status, it is not
forced to build by default unless you define `-DWITH_DMF_LUA=1` to the compiler
command-line or `CFLAGS`; also the implementation is currently compatible
with LUA-5.1 or LUA-5.2 -- so the include-file path and library name should
match your OS distribution's naming for this version (the `configure` script
tries to streamline this though).

The dynamic-language support is experimental, but the code skeleton allows
the community to implement support for other languages using the `language`
attribute in each `function` tag of the DMF-SNMP markup (if unspecified,
the interpretation effectively defaults to hardcoded `lua-5.1` support).
When hacking your language of choice support into the code, look for the
`WITH_DMF_FUNCTIONS` and `WITH_DMF_LUA` macros in the `Makefile.am` files,
`dmf-snmp.c`, `snmp-ups.c` and their headers, and the `configure.ac` script
template.

== DMF XML spec

The DMF files are implemented as XML with a particular schema.

Verifiable schemas are provided as XSD files and can be run against existing
or generated DMF files with `make dmf-validate` in the `scripts/DMF` directory
(uses `xmllint` which is also needed to build NUT manpages with `asciidoc`).

The command-line method of verification that a DMF SNMP file or an index file
built for the `nut-scanner` conforms to expected schema is:

----
    $ xmllint --noout --schema $SCHEMADIR/dmfsnmp.xsd $TESTEDFILE.dmf
    $ xmllint --noout --schema $SCHEMADIR/dmfnutscan.xsd $TESTEDINDEX.dmf
----

There are *4* main structures in the DMF XML:

 * `info_lkp_t`: mapping between NUT and SNMP values for a variable

 * `alarms_info_t`: mapping between NUT and SNMP `ups.alarm` values for a
   variable

 * `snmp_info_t`: mapping between NUT variables and SNMP OIDs

 * `mib2nut_info_t`: declaration of discovery and mapping (`snmp_info_t`)
    information

These structures are wrapped by a `nut` tag with `version` and `xmlns`
attributes so the DMF file can refer to the currently applicable schema.

=== LOOKUP

----
<nut>
    <lookup name="ats_output_status_info">
        <item oid = "1" info = "OFF" />
    </lookup>
</nut>
----

== DYNAMIC FUNCTIONS

It is possible to emulate non-provided data by a supported dynamic language
(only LUA-5.1/5.2 at this time).

For example, if the UPS only provides current in Amperes and the Voltage,
but not power in Watts, it is possible to add a function for calculation
of this value to serve it as a NUT variable for the device.

A simple example in DMF markup:

----
        ...
        <functionset name="eaton_functions">
          <function name="device.amperes" language="lua-5.1">
            function deviceamperes(device)
                power = tonumber(lua_C_gateway("input.power", device))
                voltage = tonumber(lua_C_gateway("input.voltage", device))
                if voltage ~= 0 and power ~= 0 then
                    return power / voltage
                else
                    return nil
                end
            end
          </function>
          <function name="device.luaOutlet" language="lua">
            function deviceluaOutlet(device)
                outlet = tonumber(lua_C_gateway("outlet.count", device))
                if outlet ~= 0 then
                  for i=0,outlet,1
                    do
                      publish_Lua_dstate("device."..device..".outlet."..i..".wastePower", wastePower(device, i))
                    end
                end

                return nil
            end

            function wastePower(device, outlet)
                power = tonumber(lua_C_gateway("outlet."..outlet..".power", device))
                realpower = tonumber(lua_C_gateway("outlet."..outlet..".realpower", device))

                return power - realpower
            end
          </function>
        </functionset>
        <snmp name="eaton_marlin_mib">
                <snmp_info flag_ok="yes" multiplier="128.0" name="device.amperes" string="yes" functionset="eaton_functions"/>
                <snmp_info flag_ok="yes" multiplier="128.0" name="device.luaOutlet" string="yes" functionset="eaton_functions"/>
                ...
----

The `functionset` block is the function collection for a driver (`mib2nut`).

The `function` block is the function collection for one value (`snmp_info`).
There are some rules to use it:

  * The optional `language` attribute can specify the interpreter for the
      function code. Currently only Lua is supported, with no value, empty
      value, `lua` and `lua-5.1` being hardcoded equivalents; other values
      should yield a non-fatal parsing error (logged in debug mode) and no
      processing done for the mapping value;
  * Attribute `name` of the `function` block should be the same as the
      "snmp_info `name`" for the mapping variable;
  * The (LUA) `function` block must have (mandatory) at least one function
      named with the same name as the "snmp" mapping variable, but without
      the dot in the name (e.g. `device.lua` -> `function devicelua(device)`),
      which serves as the main function for the block;
  * Could have more functions, but main function will be always the mandatory
      one, unique, and it is the entry point (others are its helpers);
  * The `device` parameter is mandatory due to internal requirements;
  * Main function can return data; if it returns - a new driver-state variable
      is going to be created by the driver, named as `device.X.function_name`
      with the returned value; if not - nothing is published by the driver.

=== LUA DYNAMIC FUNCTION BINDINGS

Currently there are two Lua <=> C function bindings implemented directly
in `snmp-ups.c` (functions that use these bindings currently won't work
in other contexts or drivers out of the box):

  * `lua_C_gateway(variable, device)` - As a parameter it receives the name
    of the requested variable and number of the device (`string`, `integer`),
    and returns the value for this variable as string.

  * `publish_Lua_dstate(variable, value)` - As a parameter it receives the
    name of a variable and value for this variable (`string`, `string`);
    this function creates new NUT variables and publishes data directly --
    bypassing the driver. It is useful for publishing multiple variables,
    or to publish in different variable names; no returns.

== Tools

For the sake of future temporary co-existence of legacy and DMF-enhanced
implementations of `snmp-ups` as a fall-back solution or for peace of mind
for conservative users, and even more as an aid to the deviated downstream
NUT forks that might have modified MIB files (perhaps in-house NUT builds
of some end-users), the tools we made to convert existing C-structure MIB
implementations to such external DMF files are also distributed here.

Before using the scripts, make sure you have run `./autogen.sh && ./configure`
in the root of NUT sources tree and generally can build NUT (the `pycparser`
tries to compile instrumented sources, and requires the toolchain as well as
the `config.h` file generated by `configure` script). Note that by default
the `configure` script would detect if it can use this toolchain to generate
DMF files, and if not - it wold fall back to using the files pre-generated
and stored in the NUT source code repository.

The generation toolkit is a mix of Python and shell scripts:

 * `jsonify-mib.py`: process MIB mapping from C source and print it to stdout
    as JSON

 * `nut_cpp`: calls the C preprocessor and filters away GCC modifiers that are
    not handled well by `pycparser` code (can break on system headers that are
    tuned for OSes, compilers and special keywords that this script does not
    yet know)

 * `xmlify-mib.py`: process JSON output produced by `jsonify-mib.py` and output
    the final DMF XML format

 * `dmfify-mib.sh`: execute this from the `$NUT_SOURCE/scripts/DMF/` directory
    and it will find and process existing `../../drivers/*-mib.c` files to feed
    them into the pipeline of the two scripts above and produce `*.dmf` files.
    It calls `jsonify-mib.py --test` so the parsed structures are recreated
    into a C file, compiled and instantly tested to make sure they match.

NOTE: At this time the Python scripts are not intended for direct execution
(exec bits not set), so you should prepend them with versioned parser name
(e.g. `python2.7 jsonify-mib.py`). If your system default version is Python-2.x
then just `python` program name may suffice.

Details on some of the tools are presented below.

=== Python and pycparser prerequisites

You need Python version 2.7 with an `argparse` module, as well as a separate
project `pycparser` installed on the build host to run the `jsonify-mib.py`
script:

 * via your package management
   As an example, you can do so:

  ** on Debian and derivative systems, using:

----
    # apt-get install python-pycparser
----

        and / or

----
    # apt-get install python3-pycparser
----

  ** on Redhat and derivative systems, using:

----
    # yum install <... to be completed>
----

  ** on OpenIndiana and similar systems, using:

----
    # pkg install -v pycparser
----

   and / or specifically

----
    # pkg install pycparser-27
----


 * or using `pip`:

----
    virtualenv dmf
    source dmf/bin/activate
    pip install -e pycparser
----

=== jsonify-mib.py

Tool parses `*-mib.c` files (picking `snmp_info_t` and `info_lkp_t` structures)
and prints the output of those as JSON. Note this is NOT intended as final DMF
form, this JSON markup is an intermediate form for easier processing.

Usage is then like this:

----
    $ python2.7 jsonify-mib.py ../../drivers/apc-ats-mib.c
    {
        "INFO": {
            "ats_output_status_info": {
                "1": "OFF",
                "2": "OL"
            },
            "ats_sensitivity_info": {
                "1": "high",
                "2": "low"
            },
    ...
----

=== xmlify-mib.py

Assuming you have installed Python e.g. using instructions above, you can
produce final DMF XML markup from the intermediate JSON by simply piping
it to the standard input of this script:

----
    $ python2.7 xmlify-mib.py < apc-ats-mib.json > apc-ats-mib.dmf
----

You can also build a pipeline of these two scripts, which is essentially
what `dmfify-mib.sh` is for.

